/* Generated by dbus-binding-tool;

<?xml version="1.0" encoding="UTF-8" ?>
<node name="/com/nokia/asdbus">
    <interface name="com.nokia.asdbus">
        <method name="resolveRecipients">
            <arg type="as" name="names" direction="in" />
            <arg type="(ia(siia(iss)))" name="reply" direction="out" />
        </method>
    </interface>
</node>

*/

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_com_nokia_asdbus
#define DBUS_GLIB_CLIENT_WRAPPERS_com_nokia_asdbus

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_nokia_asdbus_resolve_recipients (DBusGProxy *proxy, const char ** IN_names, GValueArray** OUT_reply, GError **error)
{
    return dbus_g_proxy_call (proxy, "resolveRecipients", error,
            G_TYPE_STRV, IN_names, G_TYPE_INVALID,
            dbus_g_type_get_struct ("GValueArray",
                G_TYPE_INT,  // status
                dbus_g_type_get_collection ("GPtrArray",  // responces
                    dbus_g_type_get_struct ("GValueArray",
                        G_TYPE_STRING,  // to
                        G_TYPE_INT, // status
                        G_TYPE_INT, // num
                        dbus_g_type_get_collection ("GPtrArray", // recipients
                            dbus_g_type_get_struct ("GValueArray",
                                G_TYPE_INT,
                                G_TYPE_STRING,
                                G_TYPE_STRING,
                                G_TYPE_INVALID)),
                        G_TYPE_INVALID)),
                G_TYPE_INVALID),
            OUT_reply,
            G_TYPE_INVALID);
}

typedef void (*com_nokia_asdbus_resolve_recipients_reply) (DBusGProxy *proxy, GValueArray *OUT_reply, GError *error, gpointer userdata);

static void
com_nokia_asdbus_resolve_recipients_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GValueArray* OUT_reply;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_struct ("GValueArray", G_TYPE_INT, dbus_g_type_get_collection ("GPtrArray", dbus_g_type_get_struct ("GValueArray", G_TYPE_STRING, G_TYPE_INT, G_TYPE_INT, dbus_g_type_get_collection ("GPtrArray", dbus_g_type_get_struct ("GValueArray", G_TYPE_INT, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_INVALID)), G_TYPE_INVALID)), G_TYPE_INVALID), &OUT_reply, G_TYPE_INVALID);
  (*(com_nokia_asdbus_resolve_recipients_reply)data->cb) (proxy, OUT_reply, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_nokia_asdbus_resolve_recipients_async (DBusGProxy *proxy, const char ** IN_names, com_nokia_asdbus_resolve_recipients_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "resolveRecipients", com_nokia_asdbus_resolve_recipients_async_callback, stuff, g_free, G_TYPE_STRV, IN_names, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_com_nokia_asdbus */

G_END_DECLS
